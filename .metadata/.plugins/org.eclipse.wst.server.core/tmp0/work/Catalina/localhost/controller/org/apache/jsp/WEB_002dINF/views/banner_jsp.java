/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.50
 * Generated at: 2023-12-08 00:36:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class banner_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/springWorkspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/CGV_project/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1699344468289L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\t<script src=\"http://code.jquery.com/jquery-1.10.2.min.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("\t$(document).ready(function () {\r\n");
      out.write("\t\t$(\".mySlideDiv\").not(\".active\").hide(); //화면 로딩 후 첫번째 div를 제외한 나머지 숨김\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tsetInterval(nextSlide, 4000); //4초(4000)마다 다음 슬라이드로 넘어감\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t//이전 슬라이드\r\n");
      out.write("\tfunction prevSlide() {\r\n");
      out.write("\t\t$(\".mySlideDiv\").hide(); //모든 div 숨김\r\n");
      out.write("\t\tvar allSlide = $(\".mySlideDiv\"); //모든 div 객체를 변수에 저장\r\n");
      out.write("\t\tvar currentIndex = 0; //현재 나타난 슬라이드의 인덱스 변수\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//반복문으로 현재 active클래스를 가진 div를 찾아 index 저장\r\n");
      out.write("\t\t$(\".mySlideDiv\").each(function(index,item){ \r\n");
      out.write("\t\t\tif($(this).hasClass(\"active\")) {\r\n");
      out.write("\t\t\t\tcurrentIndex = index;\r\n");
      out.write("\t\t\t}   \r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t//새롭게 나타낼 div의 index\r\n");
      out.write("\t\tvar newIndex = 0;\r\n");
      out.write("\t    \r\n");
      out.write("\t\tif(currentIndex <= 0) {\r\n");
      out.write("\t\t\t//현재 슬라이드의 index가 0인 경우 마지막 슬라이드로 보냄(무한반복)\r\n");
      out.write("\t\t\tnewIndex = allSlide.length-1;\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\t//현재 슬라이드의 index에서 한 칸 만큼 뒤로 간 index 지정\r\n");
      out.write("\t\t\tnewIndex = currentIndex-1;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t//모든 div에서 active 클래스 제거\r\n");
      out.write("\t\t$(\".mySlideDiv\").removeClass(\"active\");\r\n");
      out.write("\t    \r\n");
      out.write("\t\t//새롭게 지정한 index번째 슬라이드에 active 클래스 부여 후 show()\r\n");
      out.write("\t\t$(\".mySlideDiv\").eq(newIndex).addClass(\"active\");\r\n");
      out.write("\t\t$(\".mySlideDiv\").eq(newIndex).show();\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t//다음 슬라이드\r\n");
      out.write("\tfunction nextSlide() {\r\n");
      out.write("\t\t$(\".mySlideDiv\").hide();\r\n");
      out.write("\t\tvar allSlide = $(\".mySlideDiv\");\r\n");
      out.write("\t\tvar currentIndex = 0;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\".mySlideDiv\").each(function(index,item){\r\n");
      out.write("\t\t\tif($(this).hasClass(\"active\")) {\r\n");
      out.write("\t\t\t\tcurrentIndex = index;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t        \r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar newIndex = 0;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(currentIndex >= allSlide.length-1) {\r\n");
      out.write("\t\t\t//현재 슬라이드 index가 마지막 순서면 0번째로 보냄(무한반복)\r\n");
      out.write("\t\t\tnewIndex = 0;\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\t//현재 슬라이드의 index에서 한 칸 만큼 앞으로 간 index 지정\r\n");
      out.write("\t\t\tnewIndex = currentIndex+1;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t$(\".mySlideDiv\").removeClass(\"active\");\r\n");
      out.write("\t\t$(\".mySlideDiv\").eq(newIndex).addClass(\"active\");\r\n");
      out.write("\t\t$(\".mySlideDiv\").eq(newIndex).show();\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"slideshow-container\">\r\n");
      out.write("\r\n");
      out.write("\t     <div class=\"mySlideDiv fade active\">\r\n");
      out.write("\t        <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/banner/banner1.jpg\" class=\"bannerImg\"> \r\n");
      out.write("\t     </div>\r\n");
      out.write("\t            \r\n");
      out.write("\t     <div class=\"mySlideDiv fade\">\r\n");
      out.write("\t         <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/banner/banner2.jpg\" class=\"bannerImg\"> \r\n");
      out.write("\t     </div>\r\n");
      out.write("\t            \r\n");
      out.write("\t     <div class=\"mySlideDiv fade\">\r\n");
      out.write("\t         <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/banner/banner3.jpg\" class=\"bannerImg\"> \r\n");
      out.write("\t     </div>\r\n");
      out.write("\t\r\n");
      out.write("\t     <a class=\"prev\" onclick=\"prevSlide()\">&#10094;</a>\r\n");
      out.write("\t     <a class=\"next\" onclick=\"nextSlide()\">&#10095;</a>\r\n");
      out.write("            \r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/views/banner.jsp(4,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("contextPath");
      // /WEB-INF/views/banner.jsp(4,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/banner.jsp(4,0) '${pageContext.request.contextPath}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${pageContext.request.contextPath}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }
}
